<%#
  # most recent file version: v3.3.1
  # https://github.com/archivesspace/archivesspace/blob/v3.3.1/public/app/views/shared/_idbadge.html.erb
%>

<%
# BEGIN BC EDIT - simple test to determine if this record is the smallest unit of record
if result.level && (result.level == "item" || result.level == "file")
    smallest_unit_of_record = true
else
    smallest_unit_of_record = false
end
# END BC EDIT

if result.level
    if result.primary_type =~ /digital_object/
      level = I18n.t("enumerations.digital_object_level.#{result.level}", :default => result.level)
      badge_label = I18n.t("digital_object._public.badge_label", :level => level)
    else
      level = result.level == 'otherlevel' ? result.other_level : result.level
      badge_label = I18n.t("enumerations.archival_record_level.#{level}", :default => level)
    end
else
    badge_label = t("#{result.primary_type}._singular")
end

# BEGIN BC EDIT - compute identifier string

# the "props" array should have a "full" key that contains a boolean value if this record is a full record display. 
is_full_record = props.fetch(:full,false)

if !is_full_record
  # ignore the identifier string if this isn't a full-record display
  id_string = ""
else
  comp_id = display_component_id(result, props.fetch(:infinite_item, false))

  if comp_id.blank? || smallest_unit_of_record
    # ignore the identifier string for records that lack a component ID string,
    # or is the smallest unit of record
    id_string = ""
  elsif result.primary_type && result.primary_type =~ /digital_object/
    # swap around the component ID and display string when the primary type is digital_object  
    id_string = "#{badge_label} #{result.display_string}: #{comp_id}"
  else
    # use the default identifier string format
    id_string = "#{badge_label} #{comp_id}: #{result.display_string}"
  end
end
# END BC EDIT

%>

<%# build URL with slugs depending on the primary type %>
<% case result.primary_type %>
  <% when "resource" %>
    <% url = resource_base_url(result) %>
  <% when "archival_object" %>
    <% url = archival_object_base_url(result) %>
  <% when "digital_object" %>
    <% url = digital_object_base_url(result) %>
  <% when "accession" %>
    <% url = accession_base_url(result) %>
  <% when "subject" %>
    <% url = subject_base_url(result) %>
  <% when "classification" %>
    <% url = classification_base_url(result) %>
  <% when "agent_person" %>
    <% url = agent_base_url(result) %>
  <% when "agent_family" %>
    <% url = agent_base_url(result) %>
  <% when "agent_corporate_entity" %>
    <% url = agent_base_url(result) %>
  <% when "agent_software" %>
    <% url = agent_base_url(result) %>
  <% else %>
    <% url = result.uri %>
<% end %>

<%= (props.fetch(:full,false)? '<h1>' : '<h3>').html_safe %>
  <% if !props.fetch(:full,false) %>
    <a class="record-title" href="<%= app_prefix(url) %>">
      <%== props.fetch(:infinite_item, false) ? result.parse_full_title(true) : result.display_string %>
    </a>
  <% else %>
    <%== result.display_string %>
  <% end %>
<%= (props.fetch(:full,false)? '</h1>' : '</h3>').html_safe %>


<div class="badge-and-identifier">
  <div class="record-type-badge <%= (result.primary_type.start_with?('agent') ? 'agent' : result.primary_type) %>">
    <i class="<%= icon_for_type(result.primary_type) %>"></i>&#160;<%= badge_label %> <% if result.container_summary_for_badge %> &mdash; <%= result.container_summary_for_badge %><% end %>
  </div>
  <%# BEGIN BC EDIT - display computed identifier string. Note: this may be an empty string %>
  <div class="identifier">
    <span class="component"><%= id_string %></span>
  </div>
  <%# END BC EDIT %>
</div>
